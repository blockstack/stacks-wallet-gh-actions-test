name: Debug build

on: [pull_request]

jobs:
  testrelease:
    runs-on: ubuntu-latest
    outputs:
      new_release_published: ${{ steps.semantic.outputs.new_release_published }}
      new_release_version: ${{ steps.semantic.outputs.new_release_version }}

    steps:
      - uses: actions/checkout@v2
        with:
          token: ${{ secrets.GH_TOKEN || secrets.GITHUB_TOKEN }}

      - name: Download distributables
        uses: actions/download-artifact@v2
        with:
          path: release/

      - name: Semantic Release
        uses: cycjimmy/semantic-release-action@v2.5.3
        id: semantic
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN || secrets.GITHUB_TOKEN }}
          SEMANTIC_RELEASE_PACKAGE: ${{ github.workflow }}
        with:
          branches: |
            ['feat/show-mempool-txs']
          extra_plugins: |
            @semantic-release/changelog
            @semantic-release/git

  build:
    runs-on: ${{ matrix.os }}

    needs:
      - testrelease

    strategy:
      matrix:
        os: [ubuntu-latest]
        stx_network: [testnet, mainnet]
        include:
          # - os: macos-latest
          # NPM_COMMAND: mac

          - os: ubuntu-latest
            NPM_COMMAND: linux

          # - os: windows-latest
          #   NPM_COMMAND: win

    steps:
      - name: Check out Git repository
        uses: actions/checkout@v1

      - name: Gets semantic release info
        id: semantic_release_info
        uses: jossef/action-semantic-release-info@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}

      - run: echo ${{ steps.semantic_release_info.outputs.git_tag }}
      - run: echo ${{ steps.semantic_release_info.outputs.notes }}

      - run: echo ${{needs.testrelease.outputs.new_release_version}}
      - run: echo ${{needs.testrelease.outputs.new_release_published}}
      # - run: echo ${{toJSON(needs.testrelease.outputs)}}

      - uses: FranzDiebold/github-env-vars-action@v1.2.1
      - name: Print environment variables
        run: |
          echo "GITHUB_REPOSITORY_SLUG=$GITHUB_REPOSITORY_SLUG"
          echo "GITHUB_REPOSITORY_OWNER=$GITHUB_REPOSITORY_OWNER"
          echo "GITHUB_REPOSITORY_OWNER_SLUG=$GITHUB_REPOSITORY_OWNER_SLUG"
          echo "GITHUB_REPOSITORY_NAME=$GITHUB_REPOSITORY_NAME"
          echo "GITHUB_REPOSITORY_NAME_SLUG=$GITHUB_REPOSITORY_NAME_SLUG"
          echo "GITHUB_REF_SLUG=$GITHUB_REF_SLUG"
          echo "GITHUB_REF_NAME=$GITHUB_REF_NAME"
          echo "GITHUB_REF_NAME_SLUG=$GITHUB_REF_NAME_SLUG"
          echo "GITHUB_SHA_SHORT=$GITHUB_SHA_SHORT"
          echo "GITHUB_SHA=$GITHUB_SHA"
      - name: Variables
        id: vars
        run: |
          echo "::set-output name=version::$(cat package.json | jq -r .version)"
          echo "::set-output name=branch_name::$(echo ${GITHUB_REF#refs/heads/})"
          echo "::set-output name=pull_request_id::$(echo $GITHUB_REF)"

      - name: Install Node.js, NPM and Yarn
        uses: actions/setup-node@v1
        with:
          node-version: 10

      #
      # Windows build breaks when using the package.json script to install `app/` packages
      # using separate run to install those packages separately
      - name: Install packages
        run: yarn --frozen-lockfile --ignore-scripts
        env:
          STX_NETWORK: ${{ matrix.stx_network }}

      - name: Install `app/` packages
        run: cd app && yarn --frozen-lockfile --ignore-scripts
        env:
          STX_NETWORK: ${{ matrix.stx_network }}

      - name: Build releases
        run: ./node_modules/.bin/cross-env DEBUG_PROD=true yarn package-${{ matrix.NPM_COMMAND }}
        env:
          SHA: ${{ github.event.pull_request.head.sha }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PULL_REQUEST: ${{ steps.vars.outputs.pull_request_id }}
          BRANCH_NAME: ${{ steps.vars.outputs.branch_name }}
          STX_NETWORK: ${{ matrix.stx_network }}

      - run: ls -R release

      - uses: actions/upload-artifact@v2
        name: Upload Windows builds
        if: matrix.os == 'windows-latest'
        with:
          name: stacks-wallet-${{ steps.vars.outputs.version }}-${{ matrix.stx_network }}-windows
          path: |
            release/**/*.exe
            release/**/*.msi
      - uses: actions/upload-artifact@v2
        name: Upload MacOS builds
        if: matrix.os == 'macos-latest'
        with:
          name: stacks-wallet-${{ steps.vars.outputs.version }}-${{ matrix.stx_network }}-macos
          path: release/**/*.dmg

      - uses: actions/upload-artifact@v2
        name: Upload Linux builds
        if: matrix.os == 'ubuntu-latest'
        with:
          name: stacks-wallet-${{ steps.vars.outputs.version }}-${{ matrix.stx_network }}-linux
          path: |
            release/**/*.deb
            release/**/*.rpm

      - uses: lucasmotta/pull-request-sticky-header@1.0.0
        if: (!contains(needs.*.result, 'failure'))
        with:
          header: '> [Download the latest build](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})'
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Remove header if build failed
      - uses: lucasmotta/pull-request-sticky-header@1.0.0
        if: (contains(needs.*.result, 'failure'))
        with:
          header: '> _Build failed, [see here for details](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})_'
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
