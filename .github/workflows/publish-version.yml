name: Publish version

on:
  create:
    tags:
      - 'v*'

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]
        include:
          - os: macos-latest
            NPM_COMMAND: mac

          - os: ubuntu-latest
            NPM_COMMAND: linux

          - os: windows-latest
            NPM_COMMAND: win

    steps:
      - name: Cancel Previous Runs
        uses: styfle/cancel-workflow-action@0.6.0
        with:
          access_token: ${{ secrets.GITHUB_TOKEN }}
      - uses: actions/checkout@v2

      - uses: actions/cache@v2
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-modules-${{ hashFiles('**/yarn.lock') }}

      - name: Variables
        id: vars
        run: |
          echo "::set-output name=branch_name::$(echo ${GITHUB_REF#refs/heads/})"
          echo "::set-output name=pull_request_id::$(echo $GITHUB_REF)"

      - name: Install Node.js, NPM and Yarn
        uses: actions/setup-node@v1
        with:
          node-version: 10

      #
      # Windows build breaks when using the package.json script to install `app/` packages
      # using separate run to install those packages separately
      - name: Install packages
        run: yarn --frozen-lockfile --ignore-scripts
        env:
          STX_NETWORK: testnet

      - name: Install `app/` packages
        run: cd app && yarn --frozen-lockfile --ignore-scripts
        env:
          STX_NETWORK: testnet

      - name: Build releases
        run: ./node_modules/.bin/cross-env yarn package-${{ matrix.NPM_COMMAND }}
        env:
          SHA: ${{ github.event.pull_request.head.sha }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PULL_REQUEST: ${{ steps.vars.outputs.pull_request_id }}
          BRANCH_NAME: ${{ steps.vars.outputs.branch_name }}
          STX_NETWORK: testnet

      - uses: actions/upload-artifact@v2
        name: Windows upload
        if: matrix.os == 'windows-latest'
        with:
          name: stacks-wallet-${{ matrix.NPM_COMMAND }}
          path: |
            release/**/*.exe
            release/**/*.msi

      - uses: actions/upload-artifact@v2
        name: MacOS upload
        if: matrix.os == 'macos-latest'
        with:
          name: stacks-wallet-${{ matrix.NPM_COMMAND }}
          path: release/**/*.dmg

      - uses: actions/upload-artifact@v2
        name: Linux upload
        if: matrix.os == 'ubuntu-latest'
        with:
          name: stacks-wallet-${{ matrix.NPM_COMMAND }}
          path: |
            release/**/*.deb
            release/**/*.rpm

  publish:
    runs-on: ubuntu-latest
    needs:
      - build
    outputs:
      new_release_published: ${{ steps.semantic.outputs.new_release_published }}
      new_release_version: ${{ steps.semantic.outputs.new_release_version }}

    steps:
      - uses: actions/checkout@v2
        with:
          token: ${{ secrets.GH_TOKEN || secrets.GITHUB_TOKEN }}

      - name: Download binaries
        uses: actions/download-artifact@v2
        with:
          path: release/

      - run: ls -R release

      - name: Extract version
        id: extract_version
        uses: Saionaro/extract-package-version@v1.0.6
      # From now you can access the version
      - name: Print version
        run: echo ${{ steps.extract_version.outputs.version }}

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{steps.extract_version.outputs.version}}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: contains(github.ref, 'beta')

      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./release/
          asset_name: .zip
          asset_content_type: application/zip

  # Notify Discord channel of workflow end
  notify-end:
    runs-on: ubuntu-latest
    needs:
      - build
    if: always()
    steps:
      - name: Discord notification
        # Only run if a new release was published
        if: needs.release.outputs.new_release_published == 'true'
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        uses: Ilshidur/action-discord@master
        with:
          args: 'A new version ([v${{needs.release.outputs.new_release_version}}](https://github.com/${{ github.repository }}/releases/tag/v${{needs.release.outputs.new_release_version}})) of the ${{ github.workflow }} has been released.'
